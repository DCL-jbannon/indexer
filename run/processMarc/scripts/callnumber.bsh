import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Subfield;

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

/**
 * Extract the call number label from a record
 * @param record
 * @return Call number label
 */
public String getFullCallNumber(Record record) {

    return(getFullCallNumber(record, "949d"));
}

/**
 * Extract the call number label from a record
 * @param record
 * @return Call number label
 */
public String getFullCallNumber(Record record, String fieldSpec) {

    String val = indexer.getFirstFieldVal(record, fieldSpec);

    if (val != null) {
        return val.toUpperCase().replaceAll(" ", "");
    } else {
        return val;
    }
}

/**
 * Extract the call number label from a record
 * @param record
 * @return Call number label
 */
public String getBrowseCallNumber(Record record, String fieldSpec) {
	DataField callNumberField = (DataField) record.getVariableField(fieldSpec);
	StringBuffer callNumber = new StringBuffer();
	if (callNumberField != null) {
		if (callNumberField.getSubfield('a') != null){
			callNumber.append(callNumberField.getSubfield('a').getData());
		}
		if (callNumberField.getSubfield('b') != null){
			callNumber.append(" ");
			callNumber.append(callNumberField.getSubfield('b').getData());
		}
	}

	return callNumber.toString().toUpperCase().replaceAll("~", " ").trim();
}

/**
 * Extract the call number label from a record
 * @param record
 * @return Call number label
 */
public Set getBrowseCallNumberLocal(Record record, String fieldSpec) {
	Set results = new Set();
	return results;
	//Need to load all local call numbers
	List localCallNumbers = record.getVariableFields(fieldSpec);
	Iterator fieldsIter = topicalTerm.iterator();
	DataField field;
	while(fieldsIter.hasNext()) {
		field = (DataField) fieldsIter.next();
		List subfields = field.getSubfields();
		Iterator subfieldIter = subfields.iterator();
		while (subfieldIter.hasNext()){
			Subfield subfield = subfieldIter.next();
			if (subfield.getData().toLowerCase().contains("large type")){
				result.add("LargePrint");
				return result;
			}
		}
	}
	if (val != null) {
		return val.toUpperCase().replaceAll("~", " ");
	} else {
		return val;
	}
}
/**
 * Extract the call number label from a record
 * @param record
 * @return Call number label
 */
public String getCallNumberLabel(Record record) {       

    return getCallNumberLabel(record, "949d");
}

/**
 * Extract the call number label from a record
 * @param record
 * @return Call number label
 */
public String getCallNumberLabel(Record record, String fieldSpec) {
    
    String val = indexer.getFirstFieldVal(record, fieldSpec);
    
    if (val != null) {
        int dotPos = val.indexOf(".");
        if (dotPos > 0) {
            val = val.substring(0, dotPos);
        }
        return val.toUpperCase();
    } else {
        return val;
    }
}

/**
 * Extract the subject component of the call number
 *
 * Can return null
 *
 * @param record
 * @return Call number label
 */
public String getCallNumberSubject(Record record) {

    return(getCallNumberSubject(record, "090a:050a"));
}

/**
 * Extract the subject component of the call number
 *
 * Can return null
 *
 * @param record
 * @return Call number label
 */
public String getCallNumberSubject(Record record, String fieldSpec) {

    String val = indexer.getFirstFieldVal(record, fieldSpec);

    if (val != null) {
        String [] callNumberSubject = val.toUpperCase().split("[^A-Z]+");
        if (callNumberSubject.length > 0)
        {
            return callNumberSubject[0];
        }
    }
    return(null);
}
